@page "/table"
@attribute [StreamRendering]
@using System.Text.Json
@using System.Globalization

<PageTitle>Rust Detector</PageTitle>
<div class="d-flex justify-content-center align-items-center" style="min-height: 100vh;">
    @if (isLoading)
    {
        <div class="spinner-border" role="status">
            <span class="sr-only">Detecting...</span>
        </div>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Month No.</th>
                <th>Month</th>
                <th>Year</th>
                <th>Rust Job Openings</th>
                <th>Go Job Openings</th>
                <th>Python Job Openings</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var jobdata in _jobDataSet)
            {
                <tr>
                    <td>@jobdata.id</td>
                    <td>@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(jobdata.month)</td>
                    <td>@jobdata.year</td>
                    <td>@jobdata.rustCount</td>
                    <td>@jobdata.goCount</td>
                    <td>@jobdata.pythonCount</td>
                </tr>
            }
            </tbody>
        </table>
    }</div>

@code {
    private bool isLoading = true;
    
    public class JobData
    {
        public int id { get; set; }
        public int month { get; set; }
        public int year { get; set; }
        public int rustCount { get; set; }
        public int goCount { get; set; }
        public int pythonCount { get; set; }
    }

    string _apiUrl = "https://rustdetector.azurewebsites.net/jobdata";

    private IEnumerable<JobData>? _jobDataSet = Array.Empty<JobData>();

    private async Task RefreshJobDataSet()
    {
        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.GetAsync(_apiUrl);
        httpClient.Dispose();
        using var responseStream = await response.Content.ReadAsStreamAsync();
        _jobDataSet = await JsonSerializer.DeserializeAsync<IEnumerable<JobData>>(responseStream);
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await this.RefreshJobDataSet();
        isLoading = false;
    }
}